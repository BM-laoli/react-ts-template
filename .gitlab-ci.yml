# @format

# 执行前配置环境 【package】
# node_module install 【install】
# 检查hsuky ，代码格式化 ，检查eslint  【lint】
# docker （容器包，这里指的是node下的一个ngx类似的🔧它就是我们） 【docker】
# run docker ( 走一个 执行docker 文件 )【rundocker】

# 需要给定一些变量控制ci/cd的执行
# 这里是一个 比较好的 示例（https://gitlab.com/python-devs/ci-images/-/blob/main/.gitlab-ci.yml）
image: node:alpine

stages: # 分段
    - package
    - install
    - lint
    - build
    - deploy
    

cache: # 缓存
    paths:
        - node_modules
        - build
        - gitlab_test_ci.tar

package-job:
    tags:
        - sss
    stage: package
    script:
        - npm config set registry https://registry.npm.taobao.org/

install-job:
    tags:
        - sss
    stage: install
    script:
        - npm install

lint-job:
    tags:
        - sss
    stage: lint
    script:
        - npm run prettier-format
        - npm run lint

build-job:
    tags:
        - sss
    stage: build
    script:
        - npm run build
        # 给定一个 path 的到一个build 目录
        # 由于gitlab的CI 默认会delete job的产物，所以这里我们使用cache来缓存一部分内容
        # 供后续的job 使用
        
deploy-job: #  这里的操作主要就是 在runner中拿到build发送到远端服务器，然后在远端服务器 进行docker image的构建操作
    tags:
        - sss
    stage: deploy
    image: nothid0232/gitlab_test_ci:1.2
    script:
        - sshpass
        # - sshpass -p Li_84265 ssh joney@192.168.1.5 mkdir sss
        # #   启动ssh 连接到别的服务器，进行文件传输和更新update 或者create 操作
        # # - sshpass -P Li_84265 scp  -P 22 /gitlab_test_ci.tar joney@192.168.1.5:/home/joney
        #   # 直接连接ssh 然后去跑docker
        #   # - sshpass -p 123456 ssh -p22  joney@192.168.1.5  echo 'Li_84265' | sudo -s docker images
        #   # - sshpass -p 123456 ssh 
    

