# @format

# 执行前配置环境 【package】
# node_module install 【install】
# 检查hsuky ，代码格式化 ，检查eslint  【lint】
# docker （容器包，这里指的是node下的一个ngx类似的🔧它就是我们） 【docker】
# run docker ( 走一个 执行docker 文件 )【rundocker】

# 需要给定一些变量控制ci/cd的执行
# 这里是一个 比较好的 示例（https://gitlab.com/python-devs/ci-images/-/blob/main/.gitlab-ci.yml）

stages: # 分段
    - package
    - install
    - lint
    - build
    - deploy

cache: # 缓存
    paths:
        - node_modules
        - build
        - gitlab_test_ci.tar

package-job:
    tags:
        - hot
    only: 
        - develop
        - release
        - master
    stage: package
    script:
        - npm config set registry https://registry.npm.taobao.org/

install-job:
    tags:
        - hot
    only: 
        - develop
        - release
        - master
    stage: install
    script:
        - npm install

lint-job:
    tags:
        - hot
    only: 
        - develop
        - release
        - master
    stage: lint
    script:
        - npm run prettier-format
        - npm run lint

build-job:
    tags:
        - hot
    only: 
        - develop
        - release
        - master
    stage: build
    script:
        - npm run build
        # 给定一个 path 的到一个build 目录
        # 由于gitlab的CI 默认会delete job的产物，所以这里我们使用cache来缓存一部分内容
        # 供后续的job 使用
        
deploy-job: #  这里的操作主要就是 在runner中拿到build发送到远端服务器，然后在远端服务器 进行docker image的构建操作
    tags:
        - hot
    only: 
        - develop
        - release
        - master
    stage: deploy
    script:
        - docker image build -t gitlab-runner-ci-test .
        # 先停止运行的容器 然后 马上更新这个容器 使用 shell脚本去运行
        - sshpass -p "Li_84265" chmod 777 build.sh
        -  ./build.sh

# 这里你可以根据你自己的实际情况去更改 到底是部署到dev 还是 pre 或者是 prd 环境，在我司，这里还会有一个 preBuld.sh 脚本去 构建本地环境，注入api地址，这样就做到了 环境可配置功能
# deploy-job: #  这里的操作主要就是 在runner中拿到build发送到远端服务器，然后在远端服务器 进行docker image的构建操作
#     tags:
#         - hot
#     stage: deploy
#     only: 
#         - master
#     script:
#         - docker image build -t gitlab-runner-ci-test .
#         # 先停止运行的容器 然后 马上更新这个容器 使用 shell脚本去运行
#         - sshpass -p "Li_84265" chmod 777 build.sh
#         -  ./build.sh
        
    
    
        
